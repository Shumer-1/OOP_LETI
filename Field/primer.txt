#ifndef FIELDGENERATE_CPP
#define FIELDGENERATE_CPP

#include "FieldGenerator.h"
#include <random>
#include <iostream>

bool FieldGenerator::checkFieldPassability(Field &field_copy, Coordinates point) {
    if (point.x == field_copy.getExitCoordinates().x && point.y == field_copy.getExitCoordinates().y) {
        field_copy.getCell(point).setPassability(false);
        return true;
    }

    if (point.x >= 0 && point.y >= 0 && point.x < field_copy.getFieldWidth() && point.y < field_copy.getFieldHeight() &&
        field_copy.getCell(point).isPassable()) {
        field_copy.getCell(point).setPassability(false);
        return checkFieldPassability(field_copy, Coordinates{point.x + 1, point.y}) + checkFieldPassability(field_copy, Coordinates{point.x - 1, point.y}) + checkFieldPassability(field_copy, Coordinates{point.x, point.y + 1}) + checkFieldPassability(field_copy, Coordinates{point.x, point.y - 1});
    }
    return false;
}

FieldGenerator::FieldGenerator(Field &field) : field(field) {
    Field initial_field = field;
    while (true) {
        field = Field(initial_field.getFieldWidth(), initial_field.getFieldHeight(), initial_field.getEntranceCoordinates(), initial_field.getExitCoordinates());
        std::random_device randomWall;
        std::uniform_int_distribution<> distrib(0, MAX_FIELD_SIZE);
        for (int i = 0; i < field.getFieldHeight() * field.getFieldWidth() * OBSTACLE_SPAWN_RATE; i++) {
            Coordinates curImpassableCell = Coordinates(distrib(randomWall) % field.getFieldWidth(),
                                                        distrib(randomWall) % field.getFieldHeight());
            this->field.getCell(curImpassableCell).setPassability(false);
        }
        this->field.getCell(this->field.getEntranceCoordinates()).setPassability(true);
        this->field.getCell(this->field.getExitCoordinates()).setPassability(true);
        Field field_copy = field;
        if (checkFieldPassability(field_copy, field_copy.getEntranceCoordinates())) {
            break;
        }
    }
}